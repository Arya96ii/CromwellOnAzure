// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/*
 * Task Execution Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Tes.Models
{
    /// <summary>
    /// OutputFileLog describes a single output file. This describes file details after the task has completed successfully, for logging purposes.
    /// </summary>
    [DataContract]
    public partial class TesOutputFileLog : IEquatable<TesOutputFileLog>
    {
        /// <summary>
        /// URL of the file in storage, e.g. s3://bucket/file.txt
        /// </summary>
        /// <value>URL of the file in storage, e.g. s3://bucket/file.txt</value>
        [DataMember(Name = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Path of the file inside the container. Must be an absolute path.
        /// </summary>
        /// <value>Path of the file inside the container. Must be an absolute path.</value>
        [DataMember(Name = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Size of the file in bytes.
        /// </summary>
        /// <value>Size of the file in bytes.</value>
        [DataMember(Name = "size_bytes")]
        public string SizeBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TesOutputFileLog {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((TesOutputFileLog)obj);
        }

        /// <summary>
        /// Returns true if TesOutputFileLog instances are equal
        /// </summary>
        /// <param name="other">Instance of TesOutputFileLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TesOutputFileLog other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) &&
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) &&
                (
                    SizeBytes == other.SizeBytes ||
                    SizeBytes != null &&
                    SizeBytes.Equals(other.SizeBytes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Url != null)
                {
                    hashCode = hashCode * 59 + Url.GetHashCode();
                }

                if (Path != null)
                {
                    hashCode = hashCode * 59 + Path.GetHashCode();
                }

                if (SizeBytes != null)
                {
                    hashCode = hashCode * 59 + SizeBytes.GetHashCode();
                }

                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TesOutputFileLog left, TesOutputFileLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TesOutputFileLog left, TesOutputFileLog right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
